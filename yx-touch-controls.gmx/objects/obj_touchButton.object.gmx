<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set basic button properties

// Current touch index
_idx        = -1;

// Button radius (in pixels)
button_r    = 16;
bound_r     = button_r * 1.5;

// Button colorr
color       = c_white;

// Button text/number
text        = "1";

// Hold, press, release states
hold        = false;
press       = false;
release     = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset release state
release = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Updates button state

// Checks if mobile or not
if ( os_type == os_android || os_type == os_ios ) {
    // Temporary "loop cutting" parameter
    var cuts;
    
    // First, check all the touch inputs (5 total)
    for ( var i = 0; i &lt;= 4; i++ ) {
        // Temporary position
        var temp_x  = device_mouse_x( i ), 
            temp_y  = device_mouse_y( i );
        
        // Initial break value
        cuts    = false;
        
        // Comparing ID and index of analog sticks
        with ( obj_touchAnalog ) {
            // If ID is different and index is == i
            if ( _idx == i ) {
                // Sets to break this check and continue loop
                cuts = true;
                // Breaks this loop
                break;
            }
        }
        
        // Comparing ID and index of other buttons
        with ( obj_touchButton ) {
            // If current loop is this object, continues
            if ( id == other.id ) continue;
            
            // If ID is different and index is == i
            if ( id != other.id &amp;&amp; _idx == i ) {
                // Sets to break this check and continue loop
                cuts = true;
                // Breaks this loop
                break;
            }
        }
        
        // Breaks check below and proceeds to next loop
        if ( cuts ) continue;
        
        // Check for press and hold
        if ( 
            temp_x &gt;= x - bound_r 
            &amp;&amp; temp_x &lt;= x + bound_r 
            &amp;&amp; temp_y &gt;= y - bound_r 
            &amp;&amp; temp_y &lt;= y + bound_r 
            &amp;&amp; (
                device_mouse_check_button( i, mb_left )
                || device_mouse_check_button_pressed( i, mb_left ) 
                || device_mouse_check_button_released( i, mb_left ) 
            ) 
        ) {
            // Set index
            _idx    = i;
            
            // Define button states for press hold and release
            hold    = device_mouse_check_button( i, mb_left );
            press   = device_mouse_check_button_pressed( i, mb_left );
            release = device_mouse_check_button_released( i, mb_left );
            
            // Break this for loop
            break;
        } else {
            // Reset index and all states
            _idx    = -1;
            hold    = false;
            press   = false;
            release = false;
        }
    }
} else {
    // Checks if mouse pointer is pressed/held inside boundaries
    if (
        mouse_x &gt;= x - bound_r 
        &amp;&amp; mouse_x &lt;= x + bound_r 
        &amp;&amp; mouse_y &gt;= y - bound_r 
        &amp;&amp; mouse_y &lt;= y + bound_r 
    ) {
        // Define button states
        hold    = mouse_check_button( mb_left );
        press   = mouse_check_button_pressed( mb_left );
        release = mouse_check_button_released( mb_left );
    } else {
        // If hold or press are still in TRUE state
        if ( hold || press ) {
            hold        = false;
            press       = false;
            release     = true;
            // Set alarm to 1 tick, to simulate a release
            alarm[0]    = 1;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the button's shape

// Set face alpha
draw_set_alpha( 0.5 );

// Drawing button face
draw_set_colour( color );

// Drawing the button
draw_circle( x, y, button_r, false );

// Set outline color
draw_set_colour( c_black );

// If held/pressed, draw a darker shape behind
if ( hold || press ) {
    // Set button alpha
    draw_set_alpha( 0.25 );
    
    // Dark color
    draw_set_colour( c_dkgray );
    
    // Drawing!
    draw_circle( x, y, button_r, false );
}

// Checks if text is != ""
if ( text != "" ) {
    // Set text alpha
    draw_set_alpha( 0.5 );

    // Set text color
    draw_set_colour( c_black );
    
    // Set text align
    draw_set_halign( fa_center );
    draw_set_valign( fa_middle );
    
    // Draw text
    draw_text( x, y, text );
    
    // Reset text align
    draw_set_halign( fa_left );
    draw_set_valign( fa_top );
}

// Draw outline
draw_circle( x, y, button_r, true );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
